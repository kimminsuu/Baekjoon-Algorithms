import sys
read = sys.stdin.readline

n,m = map(int,read().split())
graph = list()
for _ in range(n) :
    graph.append(list(map(int,read().split())))

shape = [
    [(0,0), (0,1), (1,0), (1,1)],
    [(0,0), (0,1), (0,2), (0,3)],
    [(0,0), (1,0), (2,0), (3,0)],
    [(0,0), (1,0), (0,2), (0,1)],
    [(1,0), (1,1), (1,2), (0,2)],
    [(0,0), (1,0), (1,1), (1,2)],
    [(0,0), (0,1), (0,2), (1,2)],
    [(0,0), (1,0), (2,0), (2,1)],
    [(2,0), (2,1), (1,1), (0,1)],
    [(0,0), (0,1), (1,0), (2,0)], 
    [(0,0), (0,1), (1,1), (2,1)],
    [(0,0), (0,1), (0,2), (1,1)],
    [(1,0), (1,1), (1,2), (0,1)],
    [(0,0), (1,0), (2,0), (1,1)],
    [(1,0), (0,1), (1,1), (2,1)],
    [(1,0), (2,0), (0,1), (1,1)],
    [(0,0), (1,0), (1,1), (2,1)],
    [(1,0), (0,1), (1,1), (0,2)],
    [(0,0), (0,1), (1,1), (1,2)]
]

def tetro(x,y) :
    global ans
    for i in range(19) :
        res = 0
        for j in range(4) :
            nx = x+shape[i][j][0]
            ny = y+shape[i][j][1]
            if 0<=nx<n and 0<=ny<m :
                res+= graph[nx][ny]
            else :
                break
        ans = max(ans,res)

ans = 0
for i in range(n) :
    for j in range(m) :
        tetro(i,j)
print(ans)


                
